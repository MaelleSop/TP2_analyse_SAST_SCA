
name: Security

on:
  push:
    branches: ["master" ]
  pull_request:
    branches: ["master"]

permissions:
  contents: read

jobs:
  snyk:
    name: SCA & SAST (Snyk)
    permissions:
      contents: read
      security-events: write
      actions: read
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Snyk CLI to check for security issues
        # Snyk can be used to break the build when it detects security issues.
        # In this case we want to upload the SAST issues to GitHub Code Scanning
        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb

        # Runs Snyk Open Source (SCA) analysis and uploads result to Snyk.
      - name: Set up env 
        uses: snyk/actions/python-3.12@master 
        continue-on-error: true

        env:
          # This is where you will need to introduce the Snyk API token created with your Snyk account
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} 
        
        with: 
          args: --sarif-file-output=snyk.sarif

      - name: Upload SCA report
        uses: actions/upload-artifact@v4
        with:
          name: sca-report
          path: snyk.sarif


        # Runs Snyk Code (SAST) analysis and uploads result into GitHub.
        # Use || true to not fail the pipeline
      - name: Snyk Code test
        run: snyk code test --sarif > snyk-code.sarif || true

      - name: Upload SAST report
        uses: actions/upload-artifact@v4
        with:
          name: sast-report
          path: snyk-code.sarif

  gitleaks:
    name: Secret Scanning (GitLeaks)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4 

      # Scanning for secret leaks with Git Leaks
      - name: Run GitLeaks secret scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload GitLeaks report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-secrets-report
          path: gitleaks.sarif

  OWASP_ZAP:
    name: DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
        
      # - name: Start target app (example)
      #   run: |
      #     docker run -d -p 8080:3000 --name myapp myapp:latest || echo "skip"
      #     sleep 10

      # - name: Run OWASP ZAP baseline DAST scan
      #   uses: zaproxy/action-baseline@v0.9.0
      #   with:
      #     target: 'http://localhost:8080'
      #     cmd_options: '-t 300'  # 5 minutes max scan time
      #   continue-on-error: true

      # - name: Upload ZAP DAST report
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: zap-dast-report
      #     path: report_html.html
      - name: üì¶ Install ZAP
        run: |
          wget https://github.com/zaproxy/zaproxy/releases/download/v2.15.0/ZAP_2.15.0_Linux.tar.gz
          tar -xvf ZAP_2.15.0_Linux.tar.gz
          ./ZAP_2.15.0/zap.sh -daemon -host 0.0.0.0 -port 8090 -config api.addrs.addr.name=.* -config api.addrs.addr.regex=true -config api.disablekey=true &

      - name: üì¶ Install NVM
        run: |
          curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          nvm install --lts
          nvm alias default lts/*

      - name: üì¶ Install NPM and Verify
        run: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          npm install -g npm@latest
          node -v
          npm -v
  
      - name: üì¶Install Newman
        run: |
          export NVM_DIR="$HOME/.nvm"
          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
          npm install -g newman
          newman -v

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13' 

      - name: üìã Installing requirements
        run: |
          pip install -r requirements.txt

      - name: ‚ö°Ô∏è Running AutoZap
        run: |
          python3 -u ./scripts/auto_zap.py
          
      - name: üì© Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: DAST_report_html
          path: zap_report.html
          retention-days: 30
        
      - name: üì© Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: DAST_report_json
          path: zap_report.json
          retention-days: 30