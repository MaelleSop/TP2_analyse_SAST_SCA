
name: Security

on:
  push:
    branches: ["master" ]
  pull_request:
    branches: ["master"]

permissions:
  contents: read

jobs:
  snyk:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Snyk CLI to check for security issues
        # Snyk can be used to break the build when it detects security issues.
        # In this case we want to upload the SAST issues to GitHub Code Scanning
        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb

        # Runs Snyk Open Source (SCA) analysis and uploads result to Snyk.
      - name: Set up env 
        uses: snyk/actions/python-3.12@master 
        continue-on-error: true

        env:
          # This is where you will need to introduce the Snyk API token created with your Snyk account
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} 
        
        with: 
          args: --sarif-file-output=snyk.sarif

      - name: Upload SCA report
        uses: actions/upload-artifact@v4
        with:
          name: sca-report
          path: snyk.sarif


        # Runs Snyk Code (SAST) analysis and uploads result into GitHub.
        # Use || true to not fail the pipeline
      - name: Snyk Code test
        run: snyk code test --sarif > snyk-code.sarif || true

      - name: Upload SAST report
        uses: actions/upload-artifact@v4
        with:
          name: sast-report
          path: snyk-code.sarif

        # Scanning for secret leaks with Git Leaks
      - name: Run GitLeaks secret scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload GitLeaks report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-secrets-report
          path: gitleaks.sarif

        # DAST with OWASP ZAP
      - name: Start target app (example)
        run: |
          docker run -d -p 8080:3000 --name myapp myapp:latest || echo "skip"
          sleep 10

      - name: Run OWASP ZAP baseline DAST scan
        uses: zaproxy/action-baseline@v0.9.0
        with:
          target: 'http://localhost:8080'
          cmd_options: '-t 300'  # 5 minutes max scan time
        continue-on-error: true

      - name: Upload ZAP DAST report
        uses: actions/upload-artifact@v4
        with:
          name: zap-dast-report
          path: report_html.html