
name: Security

on:
  push:
    branches: ["master" ]
  pull_request:
    branches: ["master"]

permissions:
  contents: read

jobs:
  snyk:
    name: SCA (Snyk)
    permissions:
      security-events: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Snyk CLI to check for security issues
        # Snyk can be used to break the build when it detects security issues.
        # In this case we want to upload the SAST issues to GitHub Code Scanning
        uses: snyk/actions/setup@806182742461562b67788a64410098c9d9b96adb

        # Runs Snyk Open Source (SCA) analysis and uploads result to Snyk.
      - name: Set up env 
        uses: snyk/actions/python-3.12@master 
        continue-on-error: true
        env:
          # This is where you will need to introduce the Snyk API token created with your Snyk account
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}    
        with: 
          args: --sarif-file-output=snyk.sarif

      - name: Upload SCA report
        uses: actions/upload-artifact@v4
        with:
          name: sca-report
          path: snyk.sarif

  bandit:
    name: SAST (Bandit)
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit scan
        run: bandit -r . -f json -o bandit-report.json || true

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-sast-report
          path: bandit-report.json

  gitleaks:
    name: Secret Scanning (GitLeaks)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 

      # Scanning for secret leaks with Git Leaks
      - name: Run GitLeaks secret scan
        uses: gitleaks/gitleaks-action@v2
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload GitLeaks report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-secrets-report
          path: gitleaks.sarif

  OWASP_ZAP:
    name: DAST (OWASP ZAP)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Start application
        run: |
          python main.py &
          echo "Waiting for the application to be ready..."
          for i in {1..30}; do
            if curl -s http://localhost:4000 > /dev/null; then
              echo "Application is up and running!"
              break
            else
              echo "Still waiting..."
              sleep 2
            fi
          done
        # Running ZAP
      - name: Run ZAP Baseline (JSON output)
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: "http://localhost:4000"
          token: ${{ secrets.GITHUB_TOKEN }}
          fail_action: false
          cmd_options: "-J dast_report.json"

      - name: Upload ZAP JSON report
        uses: actions/upload-artifact@v4
        with:
          name: dast_report_json
          path: dast_report.json